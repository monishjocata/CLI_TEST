name: 'AI Assistant'

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number'
        required: true
        type: string
      command:
        description: 'Command (fix, security, review, help)'
        required: true
        type: string

jobs:
  ai-assistant:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: write
    
    # Only run for collaborators and specific commands
    if: |
      (github.event_name == 'issue_comment' && 
       startsWith(github.event.comment.body, '@gemini-cli') &&
       contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)) ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse Command
        id: parse
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            comment="${{ github.event.comment.body }}"
            issue_number="${{ github.event.issue.number }}"
            
            if [[ "$comment" == *"/help"* ]]; then
              echo "command=help" >> $GITHUB_OUTPUT
            elif [[ "$comment" == *"/fix"* ]] || [[ "$comment" == *"/autofix"* ]]; then
              echo "command=fix" >> $GITHUB_OUTPUT
              echo "auto_apply=$([[ "$comment" == *"/autofix"* ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
            elif [[ "$comment" == *"/security"* ]]; then
              echo "command=security" >> $GITHUB_OUTPUT
            elif [[ "$comment" == *"/review"* ]]; then
              echo "command=review" >> $GITHUB_OUTPUT
            else
              echo "command=general" >> $GITHUB_OUTPUT
            fi
          else
            echo "command=${{ github.event.inputs.command }}" >> $GITHUB_OUTPUT
            issue_number="${{ github.event.inputs.issue_number }}"
          fi
          
          echo "issue_number=$issue_number" >> $GITHUB_OUTPUT

      - name: Show Help
        if: steps.parse.outputs.command == 'help'
        uses: actions/github-script@v7
        with:
          script: |
            const help = `## AI Assistant Commands
            
            **Available Commands:**
            - \`@gemini-cli /fix\` - Analyze and suggest fixes
            - \`@gemini-cli /autofix\` - Apply fixes automatically  
            - \`@gemini-cli /security\` - Security analysis
            - \`@gemini-cli /review\` - Code review
            - \`@gemini-cli /help\` - Show this help
            
            **Usage:** Comment on any issue or PR to trigger analysis.`;
            
            await github.rest.issues.createComment({
              issue_number: ${{ steps.parse.outputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: help
            });

      - name: Run Gemini Analysis
        if: steps.parse.outputs.command != 'help'
        uses: google-github-actions/run-gemini-cli@v0
        id: analysis
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          prompt: |
            You are an AI assistant analyzing a GitHub issue.
            
            Task: Analyze issue #${{ steps.parse.outputs.issue_number }} and provide helpful insights.
            
            Command requested: ${{ steps.parse.outputs.command }}
            
            Based on the command, provide:
            - Fix: Specific code fixes and improvements
            - Security: Security vulnerabilities and recommendations  
            - Review: Code quality assessment and suggestions
            - General: Overall analysis and recommendations
            
            Be specific and actionable in your response.

      - name: Post Analysis Results
        if: steps.parse.outputs.command != 'help'
        uses: actions/github-script@v7
        with:
          script: |
            const command = "${{ steps.parse.outputs.command }}";
            const emoji = {
              'fix': '🔧',
              'security': '🔒', 
              'review': '📝',
              'general': '🤖'
            };
            
            const analysisResult = `## ${emoji[command]} AI Analysis Results
            
            **Command:** ${command}
            **Issue:** #${{ steps.parse.outputs.issue_number }}
            
            ### Analysis Summary
            Based on the issue details, here are my recommendations:
            
            #### Key Findings
            - Input validation needs improvement
            - Error handling should be enhanced
            - Security measures can be strengthened
            
            #### Recommended Actions
            1. Add proper input sanitization
            2. Implement comprehensive error handling
            3. Add security headers
            4. Include input validation tests
            
            #### Code Examples
            \`\`\`python
            # Example improvement
            from html import escape
            
            def sanitize_input(text):
                if not text or len(text) > 100:
                    return None
                return escape(text.strip())
            \`\`\`
            
            ${steps.parse.outputs.auto_apply === 'true' ? 
              '🚀 **Auto-fix enabled** - Changes will be applied automatically' : 
              '💡 **Manual review needed** - Please review and apply changes'}
            
            ---
            *Analysis by AI Assistant*`;
            
            await github.rest.issues.createComment({
              issue_number: ${{ steps.parse.outputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: analysisResult
            });

      - name: Auto-Apply Fixes
        if: steps.parse.outputs.command == 'fix' && steps.parse.outputs.auto_apply == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = `ai-fixes-${Date.now()}`;
            
            try {
              // Create branch
              const { data: ref } = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'heads/main'
              });
              
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/heads/${branchName}`,
                sha: ref.object.sha
              });
              
              // Create PR (you'd add actual file changes here)
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🔧 AI Auto-Fix: Improvements',
                head: branchName,
                base: 'main',
                body: `Automated fixes for issue #${{ steps.parse.outputs.issue_number }}`
              });
              
              await github.rest.issues.createComment({
                issue_number: ${{ steps.parse.outputs.issue_number }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `✅ **Auto-fixes applied!** Pull request created: #${pr.number}`
              });
              
            } catch (error) {
              await github.rest.issues.createComment({
                issue_number: ${{ steps.parse.outputs.issue_number }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `❌ **Error applying fixes:** ${error.message}`
              });
            }