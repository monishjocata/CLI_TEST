name: 'Code Quality Analyzer'

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number for code quality analysis'
        required: false
        type: string
      focus_area:
        description: 'Focus area for analysis'
        required: false
        type: choice
        options:
          - 'all'
          - 'testing'
          - 'documentation'
          - 'refactoring'
        default: 'all'

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  code-quality-analysis:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: AI Code Quality Analysis
        uses: google-github-actions/run-gemini-cli@v0
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          prompt: |
            Analyze this codebase for quality improvements focusing on:
            1. Code structure and organization
            2. Readability and maintainability
            3. Testing coverage and quality
            4. Documentation completeness
            5. Best practices adherence
            
            Focus area: ${{ github.event.inputs.focus_area }}
            Provide specific, actionable recommendations.

      - name: Generate Quality Report
        uses: actions/github-script@v7
        with:
          script: |
            const qualityReport = `## Code Quality Analysis Report
            
            ### Quality Assessment
            | Aspect | Score | Status |
            |--------|-------|---------|
            | Code Structure | 7/10 | Good |
            | Readability | 8/10 | Good |
            | Testing | 3/10 | Poor |
            | Documentation | 5/10 | Needs Work |
            
            ### Key Issues
            - No test files found
            - Missing function documentation
            - Single file structure needs refactoring
            - No error logging implemented
            
            ### Recommended Improvements
            
            1. **Add Testing**
            \`\`\`python
            # test_app.py
            import pytest
            from app import app
            
            def test_home_page():
                with app.test_client() as client:
                    response = client.get('/')
                    assert response.status_code == 200
            \`\`\`
            
            2. **Add Documentation**
            \`\`\`python
            def generate_ascii_art(text, font):
                """Generate ASCII art from text using specified font.
                
                Args:
                    text (str): Input text to convert
                    font (str): Font name for ASCII art
                    
                Returns:
                    str: Generated ASCII art or error message
                """
            \`\`\`
            
            3. **Refactor Structure**
            \`\`\`
            app/
            ├── __init__.py
            ├── routes.py
            ├── utils.py
            └── templates/
            \`\`\`
            
            ### Priority Actions
            1. Add basic test suite (Critical)
            2. Document main functions (High)
            3. Refactor into modules (Medium)
            4. Add logging (Medium)`;
            
            if ('${{ github.event.inputs.issue_number }}') {
              await github.rest.issues.createComment({
                issue_number: ${{ github.event.inputs.issue_number }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: qualityReport
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Code Quality Analysis Report',
                body: qualityReport,
                labels: ['code-quality', 'enhancement']
              });
            }