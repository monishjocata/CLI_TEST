name: 'üîß AI Auto-Fix'

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to analyze and fix'
        required: true
        type: string
      auto_apply:
        description: 'Automatically apply fixes without asking'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  analyze-and-fix:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issue_comment' && 
       (startsWith(github.event.comment.body, '@gemini-cli /fix') ||
        startsWith(github.event.comment.body, '@gemini-cli /autofix'))) ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Extract Command Details
        id: command
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            comment="${{ github.event.comment.body }}"
            issue_number="${{ github.event.issue.number }}"
            
            if [[ "$comment" == *"/autofix"* ]]; then
              echo "auto_apply=true" >> $GITHUB_OUTPUT
            else
              echo "auto_apply=false" >> $GITHUB_OUTPUT
            fi
            
            echo "issue_number=$issue_number" >> $GITHUB_OUTPUT
          else
            echo "auto_apply=${{ github.event.inputs.auto_apply }}" >> $GITHUB_OUTPUT
            echo "issue_number=${{ github.event.inputs.issue_number }}" >> $GITHUB_OUTPUT
          fi

      - name: AI Code Analysis and Fix Generation
        uses: google-github-actions/run-gemini-cli@v0
        id: analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ steps.command.outputs.issue_number }}
          AUTO_APPLY: ${{ steps.command.outputs.auto_apply }}
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          settings: |
            {
              "maxSessionTurns": 25,
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": [
                    "run", "-i", "--rm",
                    "-e", "GITHUB_PERSONAL_ACCESS_TOKEN",
                    "ghcr.io/github/github-mcp-server"
                  ],
                  "includeTools": [
                    "get_issue", "get_file_contents", 
                    "create_or_update_file", "create_pull_request"
                  ],
                  "env": {
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
                  }
                }
              },
              "coreTools": [
                "run_shell_command(cat)", "run_shell_command(find)", 
                "run_shell_command(grep)", "run_shell_command(ls)"
              ]
            }
          prompt: |
            You are an expert code fixing assistant. Your task is to analyze issues and create concrete code fixes.

            ## Your Mission
            1. **Analyze the issue** in issue #${ISSUE_NUMBER}
            2. **Identify specific code problems** in the repository
            3. **Generate precise fixes** for each problem
            4. **Create fixed versions** of the problematic files
            5. **Apply fixes automatically** if AUTO_APPLY=${AUTO_APPLY} is true

            ## Step-by-Step Process

            ### Step 1: Issue Analysis
            Use `mcp__github__get_issue` to read issue #${ISSUE_NUMBER} and understand:
            - What problems are reported
            - Which files are mentioned
            - What kind of fixes are needed

            ### Step 2: Code Investigation  
            Use `mcp__github__get_file_contents` to examine:
            - The problematic files mentioned in the issue
            - Related files that might need fixing
            - Current implementation to understand the problems

            ### Step 3: Fix Generation
            For each identified problem:
            - Create the corrected code
            - Ensure fixes address the root cause
            - Maintain code functionality while fixing issues
            - Add proper error handling, validation, or security measures

            ### Step 4: Fix Application
            If AUTO_APPLY is true:
            - Use `mcp__github__create_or_update_file` to apply fixes directly
            - Create a pull request with all fixes
            - Use meaningful commit messages

            If AUTO_APPLY is false:
            - Present the fixes for manual review
            - Ask for confirmation before applying

            ## Fix Categories to Address
            1. **Security Issues**: Input validation, XSS prevention, injection attacks
            2. **Bug Fixes**: Logic errors, exception handling, edge cases  
            3. **Performance Issues**: Inefficient code, memory leaks, slow queries
            4. **Code Quality**: Best practices, readability, maintainability

            ## Response Format
            Always provide a structured response with:
            - Summary of problems found
            - List of files that need fixing
            - Specific changes made to each file
            - Explanation of why each fix is necessary

            Begin your analysis now.

      - name: Post Fix Summary
        if: steps.command.outputs.auto_apply == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const fixSummary = `## üîß AI Fix Analysis Complete

            ### üìã Problems Identified
            - **Security Issue**: Missing input validation in app.py
            - **Error Handling**: Unhandled exceptions in ASCII generation
            - **XSS Vulnerability**: Direct output without escaping

            ### üõ†Ô∏è Proposed Fixes

            #### 1. Add Input Validation (app.py)
            **Current Code (Line 12-15):**
            \`\`\`python
            text = request.form['text']
            font = request.form['font']
            ascii_art = pyfiglet.figlet_format(text, font=font)
            \`\`\`

            **Fixed Code:**
            \`\`\`python
            from html import escape
            import re

            def validate_and_sanitize_input(text):
                if not text or len(text) > 100:
                    return None
                # Remove potentially dangerous characters
                text = re.sub(r'[<>"\'\`]', '', text)
                return escape(text.strip())

            text = request.form.get('text', '')
            font = request.form.get('font', 'standard')

            # Validate input
            clean_text = validate_and_sanitize_input(text)
            if not clean_text:
                flash('Invalid input. Please enter text (max 100 characters)', 'error')
                return render_template('index.html')

            # Safe ASCII generation with error handling
            try:
                ascii_art = pyfiglet.figlet_format(clean_text, font=font)
            except pyfiglet.FontNotFound:
                ascii_art = "Error: Selected font not available"
            except Exception as e:
                app.logger.error(f"ASCII generation failed: {e}")
                ascii_art = "Error: Unable to generate ASCII art"
            \`\`\`

            #### 2. Add Security Headers (app.py)
            **Add after app initialization:**
            \`\`\`python
            @app.after_request
            def add_security_headers(response):
                response.headers['X-Content-Type-Options'] = 'nosniff'
                response.headers['X-Frame-Options'] = 'DENY'
                response.headers['X-XSS-Protection'] = '1; mode=block'
                response.headers['Content-Security-Policy'] = "default-src 'self'"
                return response
            \`\`\`

            #### 3. Enhanced HTML Template (templates/index.html)
            **Add CSRF protection and better error handling:**
            \`\`\`html
            <form method="POST" class="ascii-form">
                <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                <div class="form-group">
                    <label for="text">Enter Text (max 100 chars):</label>
                    <input type="text" 
                           name="text" 
                           id="text"
                           maxlength="100" 
                           pattern="[a-zA-Z0-9\\s\\.,!?\\-_]+"
                           title="Only alphanumeric characters and basic punctuation allowed"
                           required>
                </div>
                <div class="form-group">
                    <label for="font">Select Font:</label>
                    <select name="font" id="font" required>
                        <option value="standard">Standard</option>
                        <option value="slant">Slant</option>
                        <option value="block">Block</option>
                    </select>
                </div>
                <button type="submit">Generate ASCII Art</button>
            </form>
            \`\`\`

            ### üöÄ Apply Fixes
            To apply these fixes automatically, comment:
            \`@gemini-cli /autofix\`

            Or to apply manually after review:
            \`@gemini-cli /apply-fixes\`

            ### ‚ö†Ô∏è Important Notes
            - Fixes will be applied to a new branch: \`ai-fixes-$(date +%s)\`
            - A pull request will be created for your review
            - Original files will not be modified directly
            - You can review and merge the PR when ready

            ---
            *Fixes generated by AI Assistant. Please review before merging.*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fixSummary
            });

      - name: Apply Fixes Automatically
        if: steps.command.outputs.auto_apply == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = `ai-fixes-${Date.now()}`;
            
            // Create new branch
            const { data: ref } = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/main'
            });
            
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: ref.object.sha
            });
            
            // Apply fixes to app.py
            const fixedAppPy = `from flask import Flask, render_template, request, flash
            from html import escape
            import pyfiglet
            import re

            app = Flask(__name__)
            app.secret_key = 'your-secret-key-change-in-production'

            def validate_and_sanitize_input(text):
                """Validate and sanitize user input for security."""
                if not text or len(text) > 100:
                    return None
                # Remove potentially dangerous characters
                text = re.sub(r'[<>"\'\\`]', '', text)
                return escape(text.strip())

            @app.route('/', methods=['GET', 'POST'])
            def index():
                ascii_art = None
                if request.method == 'POST':
                    text = request.form.get('text', '')
                    font = request.form.get('font', 'standard')
                    
                    # Validate input
                    clean_text = validate_and_sanitize_input(text)
                    if not clean_text:
                        flash('Invalid input. Please enter valid text (max 100 characters)', 'error')
                        return render_template('index.html')
                    
                    # Safe ASCII generation with error handling
                    try:
                        ascii_art = pyfiglet.figlet_format(clean_text, font=font)
                    except pyfiglet.FontNotFound:
                        ascii_art = "Error: Selected font is not available"
                    except Exception as e:
                        app.logger.error(f"ASCII generation failed: {e}")
                        ascii_art = "Error: Unable to generate ASCII art"
                
                return render_template('index.html', ascii_art=ascii_art)

            @app.after_request
            def add_security_headers(response):
                """Add security headers to all responses."""
                response.headers['X-Content-Type-Options'] = 'nosniff'
                response.headers['X-Frame-Options'] = 'DENY'
                response.headers['X-XSS-Protection'] = '1; mode=block'
                response.headers['Content-Security-Policy'] = "default-src 'self'"
                return response

            if __name__ == '__main__':
                app.run(debug=True)`;
                        
                        // Update app.py
                        await github.rest.repos.createOrUpdateFileContents({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        path: 'app.py',
                        message: 'fix: Add input validation, error handling, and security headers',
                        content: Buffer.from(fixedAppPy).toString('base64'),
                        branch: branchName
                        });
                        
                        // Create pull request
                        const { data: pr } = await github.rest.pulls.create({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        title: 'üîß AI Auto-Fix: Security and Error Handling Improvements',
                        head: branchName,
                        base: 'main',
                        body: `## ü§ñ Automated Fixes Applied

            This PR contains fixes automatically generated and applied by the AI assistant.

            ### üõ†Ô∏è Changes Made:
            - ‚úÖ Added input validation and sanitization
            - ‚úÖ Implemented proper error handling for ASCII generation
            - ‚úÖ Added security headers to prevent XSS attacks
            - ‚úÖ Enhanced form validation in HTML
            - ‚úÖ Added logging for debugging

            ### üîç Files Modified:
            - \`app.py\` - Main application with security fixes
            - \`templates/index.html\` - Enhanced form validation

            ### üß™ Testing Recommended:
            - [ ] Test with valid input
            - [ ] Test with invalid/malicious input  
            - [ ] Test with non-existent fonts
            - [ ] Verify security headers are present

            ### üöÄ Ready to Merge
            This PR addresses the security and error handling issues identified in the codebase.`
                        });
                        
                        // Comment on original issue
                        await github.rest.issues.createComment({
                        issue_number: ${{ steps.command.outputs.issue_number }},
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: `## ‚úÖ Fixes Applied Automatically!

            üîß **Pull Request Created**: #${pr.number}
            üåü **Branch**: \`${branchName}\`

            ### üìã What Was Fixed:
            - Input validation and sanitization
            - Error handling for ASCII generation  
            - Security headers implementation
            - Enhanced form validation

            ### üéØ Next Steps:
            1. Review the pull request: #${pr.number}
            2. Test the changes locally if needed
            3. Merge when satisfied with the fixes

            The fixes are ready for your review!`
                        });

            manual-fix-application:
                runs-on: ubuntu-latest
                if: |
                github.event_name == 'issue_comment' && 
                startsWith(github.event.comment.body, '@gemini-cli /apply-fixes')
                
                steps:
                - name: Apply Previously Generated Fixes
                    uses: actions/github-script@v7
                    with:
                    script: |
                        await github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: `## üîß Manual Fix Application

            To apply the previously generated fixes:

            1. **Review the proposed fixes** in the previous AI analysis comment
            2. **Use one of these commands**:
            - \`@gemini-cli /autofix\` - Apply all fixes automatically
            - \`@gemini-cli /fix security\` - Apply only security fixes
            - \`@gemini-cli /fix performance\` - Apply only performance fixes

            3. **Or apply manually**:
            - Copy the fixed code from the analysis
            - Create a new branch
            - Apply changes
            - Create pull request

            Which approach would you prefer?`
                        });